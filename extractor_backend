from PIL import Image
import torch
import torchvision.models as models
import torchvision.transforms as transforms
import os

# Load MobileNetV2 features
mobilenet = models.mobilenet_v2(pretrained=True).features.eval()

# Giống hệt tiền xử lý ImageNet (CoreML cũng thế)
preprocess = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize(
        mean=[0.485, 0.456, 0.406],  # ImageNet mean
        std=[0.229, 0.224, 0.225]    # ImageNet std
    )
])

def extract_product_vector(image: Image.Image) -> list:
    image_tensor = preprocess(image).unsqueeze(0)  # shape: [1, 3, 224, 224]
    
    with torch.no_grad():
        output = mobilenet(image_tensor)           # shape: [1, 1280, 7, 7]
        pooled = torch.nn.functional.adaptive_avg_pool2d(output, (1, 1))  # -> [1, 1280, 1, 1]
        vector = pooled.view(-1).tolist()          # Flatten về [1280]
    
    return vector


def extract_all_vectors(image_dir="./images/"):
    vectors = {}
    for file in os.listdir(image_dir):
        if file.endswith(".jpg") or file.endswith(".png"):
            img_path = os.path.join(image_dir, file)
            image = Image.open(img_path).convert("RGB")
            vector = extract_product_vector(image)
            vectors[file] = vector
    return vectors

