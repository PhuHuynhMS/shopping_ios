import CoreML
import Vision
import UIKit

extension ProductViewModel {
    func extractFeatureVector(from image: UIImage) async throws -> [Double]? {
        guard let cgImage = image.cgImage else { return nil }

        let model = try MobileNetV2_FeatureExtractor(configuration: .init()).model
        let visionModel = try VNCoreMLModel(for: model)

        return try await withCheckedThrowingContinuation { continuation in
            let request = VNCoreMLRequest(model: visionModel) { request, error in
                if let error = error {
                    continuation.resume(throwing: error)
                    return
                }

                guard let result = request.results?.first as? VNCoreMLFeatureValueObservation,
                      let array = result.featureValue.multiArrayValue else {
                    continuation.resume(returning: nil)
                    return
                }

                let vector = (0..<array.count).map { array[$0].doubleValue }
                continuation.resume(returning: vector)
            }

            request.imageCropAndScaleOption = .centerCrop
            try? VNImageRequestHandler(cgImage: cgImage).perform([request])
        }
    }

    func cosineSimilarity(_ a: [Double], _ b: [Double]) -> Double {
        let dot = zip(a, b).map(*).reduce(0, +)
        let normA = sqrt(a.map { $0 * $0 }.reduce(0, +))
        let normB = sqrt(b.map { $0 * $0 }.reduce(0, +))
        return dot / (normA * normB + 1e-10)
    }

    func findTopSimilarProducts(to inputVector: [Double], topN: Int = 5) -> [Product] {
        let scored = allProducts.map { product in
            let score = cosineSimilarity(inputVector, product.vector)
            return (product, score)
        }

        return scored
            .sorted { $0.1 > $1.1 }
            .prefix(topN)
            .map { $0.0 }
    }

    func handleImageSearch(_ image: UIImage) {
        Task {
            do {
                if let vector = try await extractFeatureVector(from: image) {
                    let topMatches = findTopSimilarProducts(to: vector)
                    DispatchQueue.main.async {
                        self.similarProducts = topMatches
                    }
                }
            } catch {
                print("❌ Lỗi khi trích vector từ ảnh: \(error)")
            }
        }
    }
}
